import { ProposalModel } from "../models/proposal.model";
import { ProposalRegisterDto } from "../dtos/proposal-register-request.dto";
import { ProposalRepository } from "../repositories/proposal.repository";
import { ProposalStatusUpdateDto } from "../dtos/proposal-status-update-request.dto";
import { ProposalAddItemUpdateDto } from "../dtos/proposal-addItem-update.dto";
import { ProposalSupplierAcceptUpdateDto } from "../dtos/proposal-accept-supplier-updatet.dto";
import { ProposalAssociationAcceptUpdateDto } from "../dtos/proposal-accept-association-updatet.dto";
import { AllotmentRepository } from "../repositories/allotment.repository";
import { BidRepository } from "../repositories/bid.repository";
import { ProposalGetByBidResponseDto } from "../dtos/proposal-get-by-bid-response.dto";
import { UserRepository } from "../repositories/user.repository";
import { ProposalRefusedRequestDto } from "../dtos/proposal-refused-request.dto";
import { NotificationService } from "./notification.service";
import { ProposalNotificationInterface } from "../interfaces/proposal-notification-dto";
import { AllotmentService } from "./allotment.service";
import { ContractService } from "./contract.service";
import { ProposalUpdateValues } from "../dtos/proposal-update-values-request.dto";
import { BidService } from "./bid.service";
import { ProposalReviewerAcceptUpdateDto } from "../dtos/proposal-accept-reviewer-update.dto";
export declare class ProposalService {
    private readonly _proposalRepository;
    private readonly _allotmentRepository;
    private readonly _allotmentService;
    private readonly _bidRepository;
    private readonly _userRepository;
    private readonly _contractService;
    private readonly _notificationService;
    private readonly _bidService;
    private readonly _logger;
    constructor(_proposalRepository: ProposalRepository, _allotmentRepository: AllotmentRepository, _allotmentService: AllotmentService, _bidRepository: BidRepository, _userRepository: UserRepository, _contractService: ContractService, _notificationService: NotificationService, _bidService: BidService);
    register(proposedById: string, dto: ProposalRegisterDto): Promise<ProposalModel>;
    list(): Promise<ProposalModel[]>;
    updateAcceptfromSupplier(_id: string, dto: ProposalSupplierAcceptUpdateDto): Promise<ProposalModel>;
    updateAcceptAssociation(_id: string, dto: ProposalAssociationAcceptUpdateDto): Promise<ProposalModel>;
    updateAcceptReviewer(_id: string, dto: ProposalReviewerAcceptUpdateDto, userId: string): Promise<ProposalModel | any>;
    refusedProposal(proposalId: string, refusedById: string, dto: ProposalRefusedRequestDto): Promise<ProposalModel>;
    acceptProposal(proposalId: string, acceptById: string, dto?: ProposalNotificationInterface): Promise<ProposalModel>;
    updateStatus(_id: string, dto: ProposalStatusUpdateDto): Promise<ProposalModel>;
    getByUserInBid(proposedById: string, allotmentId: string): Promise<boolean>;
    addItem(_id: string, dto: ProposalAddItemUpdateDto): Promise<ProposalModel>;
    removeItem(_id: string, dto: ProposalAddItemUpdateDto): Promise<ProposalModel>;
    getById(_id: string): Promise<ProposalModel>;
    deleteById(_id: string): Promise<ProposalModel & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    listByBid(bidId: string): Promise<ProposalGetByBidResponseDto>;
    getProposalAcceptByBid(bidId: string): Promise<ProposalModel>;
    private proposalWinForBid;
    private proposalWinUpdate;
    updateValues(id: string, dto: ProposalUpdateValues): Promise<ProposalModel>;
}
