import { UserTypeEnum } from '../enums/user-type.enum';
import { ResponseDto } from "src/shared/dtos/response.dto";
import { UserConfirmationRegisterSendRequestDto } from "../dtos/user-confirmation-register-request.dto";
import { UserRegisterConfirmationCodeRequestDto } from "../dtos/user-register-confirmation-code-request.dto";
import { UserRegisterPasswordRequestDto } from "../dtos/user-register-password-request.dto";
import { UserRegisterRequestDto } from "../dtos/user-register-request.dto";
import { UserRegisterResendEmailRequestDto } from "../dtos/user-register-resend-email-request.dto";
import { UserResetPasswordConfirmationRequestDto } from "../dtos/user-reset-password-confirmation-request.dto";
import { UserResetPasswordRequestDto } from "../dtos/user-reset-password-request.dto";
import { UserResetPasswordResendEmailRequestDto } from "../dtos/user-reset-password-resend-email-request.dto";
import { UserUpdatePasswordRequestDto } from "../dtos/user-update-password-request.dto";
import { UserUpdateProfilePictureRequestDto } from "../dtos/user-update-profile-picture-request.dto";
import { UserUpdateRequestDto } from "../dtos/user-update-request.dto";
import { UserRepository } from "../repositories/user.repository";
import { UserService } from "../services/user.service";
import { VerificationService } from "../services/verification.service";
import { UserUpdateByIdRequestDto } from '../dtos/user-update-by-id-request.dto';
import { UserRolesEnum } from '../enums/user-roles.enum';
export declare class UserController {
    private readonly userService;
    private readonly userRepository;
    private readonly verificationService;
    private readonly logger;
    constructor(userService: UserService, userRepository: UserRepository, verificationService: VerificationService);
    getUser(request: any): Promise<ResponseDto>;
    getAll(): Promise<ResponseDto>;
    getById(_id: string): Promise<ResponseDto>;
    getUserBySupplierId(_id: string): Promise<ResponseDto>;
    listByType(type: UserTypeEnum): Promise<ResponseDto>;
    listByRole(role: UserRolesEnum): Promise<ResponseDto>;
    register(dto: UserRegisterRequestDto): Promise<ResponseDto>;
    registerWithoutAuth(dto: UserRegisterRequestDto): Promise<ResponseDto>;
    confirmRegistrationCode(dto: UserRegisterConfirmationCodeRequestDto): Promise<ResponseDto>;
    registerPassword(dto: UserRegisterPasswordRequestDto): Promise<ResponseDto>;
    confirmationRegisterSend(dto: UserConfirmationRegisterSendRequestDto): Promise<ResponseDto>;
    resendCodeRegisterEmail(dto: UserRegisterResendEmailRequestDto): Promise<ResponseDto>;
    update(_id: string, dto: UserUpdateRequestDto): Promise<ResponseDto>;
    updateById(_id: string, dto: UserUpdateByIdRequestDto): Promise<ResponseDto>;
    updatePassword(request: any, dto: UserUpdatePasswordRequestDto): Promise<ResponseDto>;
    resetPassword(dto: UserResetPasswordRequestDto): Promise<ResponseDto>;
    firstAccess(dto: UserResetPasswordRequestDto): Promise<ResponseDto>;
    resetPasswordConfirmation(dto: UserResetPasswordConfirmationRequestDto): Promise<ResponseDto>;
    resetPasswordResendEmail(dto: UserResetPasswordResendEmailRequestDto): Promise<ResponseDto>;
    updateProfilePicture(dto: UserUpdateProfilePictureRequestDto): Promise<ResponseDto>;
    deleteById(_id: string): Promise<ResponseDto>;
}
