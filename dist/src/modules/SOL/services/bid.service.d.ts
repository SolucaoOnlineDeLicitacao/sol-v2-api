/// <reference types="multer" />
import { BidRepository } from "../repositories/bid.repository";
import { BidModel } from "../models/bid.model";
import { BidUpdateDto } from "../dtos/bid-update-request.dto";
import { UserRepository } from "../repositories/user.repository";
import { BidUpdateStatusRequestDto } from "../dtos/bid-update-status-request.dto";
import { BidAddProposalDto } from "../dtos/bid-add-proposal.dto";
import { AllotmentRepository } from "../repositories/allotment.repository";
import { NotificationService } from "./notification.service";
import { AgreementService } from "./agreement.service";
import { FileRepository } from "../repositories/file.repository";
import { SupplierService } from "./supplier.service";
import { ProposalRepository } from "../repositories/proposal.repository";
import { SupplierRepository } from "../repositories/supplier.repository";
import { AssociationRepository } from "../repositories/association.repository";
import { ModelContractRepository } from "../repositories/model-contract.repository";
import { ContractRepository } from "../repositories/contract.repository";
import { text } from "aws-sdk/clients/customerprofiles";
import { BidDateUpdateDto } from "../dtos/bid-date-update.dto";
import { PlataformRepository } from "../repositories/plataform.repository";
import { ModelContractClassificationEnum } from "../enums/modelContract-classification.enum";
import { CostItemsService } from "./cost-items.service";
import { RegistryService } from "./registry.service";
import { ConfigService } from "@nestjs/config";
import { ProjectService } from "./project.service";
import { LacchainModel } from "../models/blockchain/lacchain.model";
import { MyBidModel } from "../models/database/bid.model";
import { BidHistoryModel } from "../models/database/bid_history.model";
import { ItemsModel } from "../models/database/items.model";
export declare class BidService {
    private readonly _bidsRepository;
    private readonly _userRepository;
    private readonly _allotmentRepository;
    private readonly _notificationService;
    private readonly _agreementService;
    private readonly _fileRepository;
    private readonly _supplierService;
    private readonly _proposalRepository;
    private readonly _contractRepository;
    private readonly _modelContractRepository;
    private readonly _associationRepository;
    private readonly _supplierRepository;
    private readonly _plataformRepository;
    private readonly _costItemsService;
    private readonly _registryService;
    private readonly _configService;
    private readonly _projectService;
    private _lacchainModel;
    private _myBidModel;
    private _bidHistoryModel;
    private readonly itemsModel;
    private readonly _logger;
    constructor(_bidsRepository: BidRepository, _userRepository: UserRepository, _allotmentRepository: AllotmentRepository, _notificationService: NotificationService, _agreementService: AgreementService, _fileRepository: FileRepository, _supplierService: SupplierService, _proposalRepository: ProposalRepository, _contractRepository: ContractRepository, _modelContractRepository: ModelContractRepository, _associationRepository: AssociationRepository, _supplierRepository: SupplierRepository, _plataformRepository: PlataformRepository, _costItemsService: CostItemsService, _registryService: RegistryService, _configService: ConfigService, _projectService: ProjectService, _lacchainModel: LacchainModel, _myBidModel: MyBidModel, _bidHistoryModel: BidHistoryModel, itemsModel: ItemsModel);
    handleCron(): Promise<void>;
    register(token: string, associationId: string, dto: any, files: Array<Express.Multer.File>): Promise<BidModel>;
    findAgreementByReviewerOrManagerId(_id: string): Promise<BidModel[]>;
    findAgreementByReviewerId(_id: string): Promise<BidModel[] | void>;
    findAgreementByViewerId(_id: string): Promise<BidModel[] | void>;
    findAgreementByProjectManagerId(_id: string): Promise<BidModel[] | void>;
    findAgreementByManagerId(_id: string): Promise<BidModel[]>;
    list(): Promise<BidModel[]>;
    listAllotmentBydBidId(_id: string): Promise<any>;
    listByAssociation(userId: string): Promise<any>;
    update(_id: string, dto: BidUpdateDto): Promise<BidModel>;
    addProposal(_id: string, dto: BidAddProposalDto): Promise<BidModel>;
    updateStatus(token: string, userId: string, _id: string, dto: BidUpdateStatusRequestDto): Promise<BidModel | any>;
    updateOpenDate(dto: BidDateUpdateDto): Promise<BidModel | any>;
    getById(_id: string): Promise<BidModel>;
    deleteById(_id: string): Promise<BidModel & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    downloadFile(id: string, type: string): Promise<any>;
    listForSupplier(userId: string): Promise<any>;
    listForProposalSupplier(userId: string): Promise<any>;
    formatCNPJ(cnpj: string): string;
    sendTieBreaker(_id: string): Promise<any>;
    bidPdfDownload(_id: string, type: string): Promise<text>;
    createDocument(_id: string, lang: string, type: ModelContractClassificationEnum): Promise<any>;
    private costItensGet;
    private callPythonFile;
    report(): Promise<{
        status: string;
        quantity: any;
        value: number;
    }[]>;
    createData(dto: any): {
        bidId: any;
        description: any;
        agreement: any;
        classification: any;
        bid_type: any;
        state: any;
        city: any;
        association: any;
        status: any;
    };
    calculateHash(data: any): string;
}
